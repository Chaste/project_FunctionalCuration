#ifdef CHASTE_CVODE
//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: Corrias_rabbit_purkinje_model
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 12434, pycml: 12383, optimize: 12408)
//! on Fri May 27 16:09:23 2011
//! 
//! <autogenerated>

#include "corrias_purkinje_2011.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"

    double Dynamiccorrias_purkinje_2011FromCellMLCvode::Get_chaste_interface__i_ionic()
    {
        return var_chaste_interface__i_ionic;
    }
    
    double Dynamiccorrias_purkinje_2011FromCellMLCvode::Get_chaste_interface__protocol__i_cal()
    {
        return var_chaste_interface__protocol__i_cal;
    }
    
    double Dynamiccorrias_purkinje_2011FromCellMLCvode::Get_membrane__i_stim()
    {
        return var_membrane__i_stim;
    }
    
    double Dynamiccorrias_purkinje_2011FromCellMLCvode::Get_chaste_interface__Time__time()
    {
        return var_chaste_interface__Time__time;
    }
    
    double Dynamiccorrias_purkinje_2011FromCellMLCvode::Get_extracellular_calcium_concentration_constant()
    {
        // Constant value given in CellML
        return NV_Ith_S(mParameters, 0);
    }
    
    
    double Dynamiccorrias_purkinje_2011FromCellMLCvode::Get_extracellular_potassium_concentration_constant()
    {
        // Constant value given in CellML
        return NV_Ith_S(mParameters, 1);
    }
    
    
    double Dynamiccorrias_purkinje_2011FromCellMLCvode::Get_membrane_capacitance_constant()
    {
        // Constant value given in CellML
        return NV_Ith_S(mParameters, 2);
    }
    
    
    double Dynamiccorrias_purkinje_2011FromCellMLCvode::Get_membrane_voltage_constant()
    {
        // Constant value given in CellML
        return NV_Ith_S(mParameters, 3);
    }
    
    
    Dynamiccorrias_purkinje_2011FromCellMLCvode::Dynamiccorrias_purkinje_2011FromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                14,
                -1,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamiccorrias_purkinje_2011FromCellMLCvode>::Instance();
        this->mVoltageIndex = GetAnyVariableIndex("membrane_voltage");
        Init();

        NV_Ith_S(this->mParameters, 0) = 2.0; // (c,Environment__Ca_o) [millimolar]
        NV_Ith_S(this->mParameters, 1) = 5.4; // (c,Environment__K_o) [millimolar]
        NV_Ith_S(this->mParameters, 2) = 69.0; // (c,membrane__Cm) [capacitance_units]
        NV_Ith_S(this->mParameters, 3) = -88.34; // (c,chaste_interface__membrane__Vm) [millivolt]
        NV_Ith_S(this->mParameters, 4) = 1; // (c,protocol__chaste_membrane_capacitance) [proto_uF_per_cm2]
        // Protocol outputs
        this->mOutputsInfo.resize(5);
        this->mOutputsInfo[0] = std::make_pair(0, PARAMETER);
        this->mOutputsInfo[1] = std::make_pair(0, DERIVED);
        this->mOutputsInfo[2] = std::make_pair(1, DERIVED);
        this->mOutputsInfo[3] = std::make_pair(3, PARAMETER);
        this->mOutputsInfo[4] = std::make_pair(UNSIGNED_UNSET, FREE);
        
    }
    
    Dynamiccorrias_purkinje_2011FromCellMLCvode::~Dynamiccorrias_purkinje_2011FromCellMLCvode()
    {
    }
    
    void Dynamiccorrias_purkinje_2011FromCellMLCvode::VerifyStateVariables()
    {
        
    }
    
    double Dynamiccorrias_purkinje_2011FromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        N_Vector rY = rGetStateVariables();
        double var_chaste_interface__membrane__Ca_i_peripheral = NV_Ith_S(rY, 0);
        // Units: millimolar; Initial value: 0.00001
        double var_chaste_interface__x_Ltype__x_Ltype = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.000003
        double var_chaste_interface__y_Ltype__y_Ltype = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.1
        double var_chaste_interface__y_ca_Ltype__y_ca_Ltype = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.7
        
        const double var_i_cal__i_cal = 5.4 * var_chaste_interface__x_Ltype__x_Ltype * var_chaste_interface__y_Ltype__y_Ltype * var_chaste_interface__y_ca_Ltype__y_ca_Ltype * (NV_Ith_S(mParameters, 3) - (log(NV_Ith_S(mParameters, 0) / var_chaste_interface__membrane__Ca_i_peripheral) * 13.3568803298)); // current_units
        const double var_chaste_interface__protocol__i_cal = (var_i_cal__i_cal / NV_Ith_S(mParameters, 2)) * NV_Ith_S(mParameters, 4); // proto_uA_per_cm2
        var_chaste_interface__i_ionic = var_chaste_interface__protocol__i_cal; // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamiccorrias_purkinje_2011FromCellMLCvode::EvaluateRhs(double var_chaste_interface__Time__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__Ca_i_peripheral = NV_Ith_S(rY, 0);
        // Units: millimolar; Initial value: 0.00001
        double var_chaste_interface__membrane__Ca_i_bulk = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000032
        double var_chaste_interface__membrane__Ca_sr = NV_Ith_S(rY, 2);
        // Units: millimolar; Initial value: 0.17
        double var_chaste_interface__membrane__Na_i = NV_Ith_S(rY, 3);
        // Units: millimolar; Initial value: 6.7
        double var_chaste_interface__x_Ttype__x_Ttype = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.001337
        double var_chaste_interface__y_Ttype__y_Ttype = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.01
        double var_chaste_interface__x_Ltype__x_Ltype = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.000003
        double var_chaste_interface__y_Ltype__y_Ltype = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.1
        double var_chaste_interface__y_ca_Ltype__y_ca_Ltype = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.7
        double var_chaste_interface__x_na_fast__x_na_fast = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.000007
        double var_chaste_interface__y_na_fast__y_na_fast = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.978861
        double var_chaste_interface__x_na_late__x_na_late = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.000012
        double var_chaste_interface__y_na_late__y_na_late = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.864489
        double var_chaste_interface__y_gate_f_na__y_gate_f_na = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.011099
        
        
        // Mathematics
        const double var_i_cal__i_cal = 5.4 * var_chaste_interface__x_Ltype__x_Ltype * var_chaste_interface__y_Ltype__y_Ltype * var_chaste_interface__y_ca_Ltype__y_ca_Ltype * (NV_Ith_S(mParameters, 3) - (log(NV_Ith_S(mParameters, 0) / var_chaste_interface__membrane__Ca_i_peripheral) * 13.3568803298)); // current_units
        const double var_i_naca__i_naca = (((exp((NV_Ith_S(mParameters, 3) * 0.5) * 0.0374338908227) * pow(var_chaste_interface__membrane__Na_i, 3.0) * NV_Ith_S(mParameters, 0)) - (var_chaste_interface__membrane__Ca_i_peripheral * exp((NV_Ith_S(mParameters, 3) *  -0.5) * 0.0374338908227) * 2744000.0)) * 0.512009113204) / ((1.0 + (0.001 * ((var_chaste_interface__membrane__Ca_i_peripheral * 2744000.0) + (NV_Ith_S(mParameters, 0) * pow(var_chaste_interface__membrane__Na_i, 3.0))))) * (1.0 + (var_chaste_interface__membrane__Ca_i_peripheral * 144.927536232))); // current_units
        const double var_i_rel_per__i_rel_per = 2500.0 * (var_chaste_interface__membrane__Ca_sr / (1.0 + pow(0.001 / var_chaste_interface__membrane__Ca_i_peripheral, 2.0))); // current_units
        const double var_i_serca_per__i_serca_per = 120.0 * ((pow(var_chaste_interface__membrane__Ca_i_peripheral * 4065.04065041, 1.6) - pow(var_chaste_interface__membrane__Ca_sr * 0.588235294118, 1.6)) / (1.0 + pow(var_chaste_interface__membrane__Ca_i_peripheral * 4065.04065041, 1.6) + pow(var_chaste_interface__membrane__Ca_sr * 0.588235294118, 1.6))); // current_units
        const double var_i_serca_bulk__i_serca_bulk = 120.0 * ((pow(var_chaste_interface__membrane__Ca_i_bulk * 4065.04065041, 1.6) - pow(var_chaste_interface__membrane__Ca_sr * 0.588235294118, 1.6)) / (1.0 + pow(var_chaste_interface__membrane__Ca_i_bulk * 4065.04065041, 1.6) + pow(var_chaste_interface__membrane__Ca_sr * 0.588235294118, 1.6))); // current_units
        const double var_i_diff__i_diff = 5000.0 * (var_chaste_interface__membrane__Ca_i_peripheral - var_chaste_interface__membrane__Ca_i_bulk); // current_units
        const double var_i_leak__i_leak = 10.0 * (var_chaste_interface__membrane__Ca_sr - var_chaste_interface__membrane__Ca_i_bulk); // current_units
        const double d_dt_chaste_interface__membrane__Ca_i_peripheral = ((( -1.0 * var_i_cal__i_cal) + ( -1.0 * (0.9 * var_chaste_interface__x_Ttype__x_Ttype * var_chaste_interface__y_Ttype__y_Ttype * (NV_Ith_S(mParameters, 3) - (log(NV_Ith_S(mParameters, 0) / var_chaste_interface__membrane__Ca_i_peripheral) * 13.3568803298)))) + ( -1.0 * (0.0001 * (NV_Ith_S(mParameters, 3) - (log(NV_Ith_S(mParameters, 0) / var_chaste_interface__membrane__Ca_i_peripheral) * 13.3568803298)))) + (1.0 * var_i_rel_per__i_rel_per) + ( -1.0 * var_i_serca_per__i_serca_per) + ( -1.0 * var_i_diff__i_diff) + (2.0 * var_i_naca__i_naca) + ( -1.0 * (5.0 * (1.0 / (1.0 + pow(0.0001 / var_chaste_interface__membrane__Ca_i_peripheral, 1.5)))))) * 1000.0) * 1.9530902365e-09; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__membrane__Ca_i_bulk = ((( -1.0 * var_i_serca_bulk__i_serca_bulk) + var_i_diff__i_diff + var_i_leak__i_leak) * 1000.0) * 6.51030078835e-10; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__membrane__Ca_sr = ((( -1.0 * var_i_rel_per__i_rel_per) + ( -1.0 * var_i_leak__i_leak) + var_i_serca_bulk__i_serca_bulk + var_i_serca_per__i_serca_per) * 1000.0) * 6.51030078835e-09; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__membrane__Na_i = ((( -1.0 * (1140.0 * var_chaste_interface__x_na_fast__x_na_fast * var_chaste_interface__y_na_fast__y_na_fast * (NV_Ith_S(mParameters, 3) - (26.7137606597 * log(140.0 / var_chaste_interface__membrane__Na_i))))) + ( -1.0 * (2.0 * var_chaste_interface__x_na_late__x_na_late * var_chaste_interface__y_na_late__y_na_late * (NV_Ith_S(mParameters, 3) - (26.7137606597 * log(140.0 / var_chaste_interface__membrane__Na_i))))) + ( -3.0 * (442.2 * (1.0 / (1.0 + exp((NV_Ith_S(mParameters, 3) + 80.0) *  -0.0222222222222))) * (1.0 / (1.0 + exp((NV_Ith_S(mParameters, 3) + 0.0) * 0.008))) * (1.0 / (1.0 + pow(1.9 / NV_Ith_S(mParameters, 1), 1.45))) * (1.0 / (1.0 + pow(31.98 / var_chaste_interface__membrane__Na_i, 1.0))))) + ( -3.0 * var_i_naca__i_naca) + ( -1.0 * (0.045290323 * var_chaste_interface__y_gate_f_na__y_gate_f_na * (NV_Ith_S(mParameters, 3) - (26.7137606597 * log(140.0 / var_chaste_interface__membrane__Na_i))))) + ( -1.0 * (0.01 * (NV_Ith_S(mParameters, 3) - (26.7137606597 * log(140.0 / var_chaste_interface__membrane__Na_i)))))) * 1000.0) * 9.76545118252e-10; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__x_Ttype__x_Ttype = ((1.0 / (1.0 + exp((NV_Ith_S(mParameters, 3) + 47.8) *  -0.181818181818))) - var_chaste_interface__x_Ttype__x_Ttype) * 1.0; // 'per millisecond'
        const double d_dt_chaste_interface__y_Ttype__y_Ttype = ((1.0 / (1.0 + exp((NV_Ith_S(mParameters, 3) + 67.9) * 0.258397932817))) - var_chaste_interface__y_Ttype__y_Ttype) / (1.42271 * exp( -0.05119 * NV_Ith_S(mParameters, 3))); // 'per millisecond'
        const double d_dt_chaste_interface__x_Ltype__x_Ltype = ((1.0 / (1.0 + exp((NV_Ith_S(mParameters, 3) + 14.6) *  -0.181818181818))) - var_chaste_interface__x_Ltype__x_Ltype) * 1.42857142857; // 'per millisecond'
        const double d_dt_chaste_interface__y_Ltype__y_Ltype = ((1.0 / (1.0 + exp((NV_Ith_S(mParameters, 3) + 31.0) * 0.180505415162))) - var_chaste_interface__y_Ltype__y_Ltype) / (25.1 / (0.04 + (0.7 * exp( -1.0 * pow(0.028 * (NV_Ith_S(mParameters, 3) + 14.5), 2.0))))); // 'per millisecond'
        const double d_dt_chaste_interface__y_ca_Ltype__y_ca_Ltype = ((0.4 + (0.6 / (1.0 + pow(var_chaste_interface__membrane__Ca_i_peripheral * 10000.0, 2.0)))) - var_chaste_interface__y_ca_Ltype__y_ca_Ltype) / (2.0 + (80.0 / (1.0 + pow(var_chaste_interface__membrane__Ca_i_peripheral * 10000.0, 2.0)))); // 'per millisecond'
        const double d_dt_chaste_interface__x_na_fast__x_na_fast = ((1.0 / (1.0 + exp((NV_Ith_S(mParameters, 3) + 25.0) *  -0.2))) - var_chaste_interface__x_na_fast__x_na_fast) * 200.0; // 'per millisecond'
        const double d_dt_chaste_interface__y_na_fast__y_na_fast = ((1.0 / (1.0 + exp((NV_Ith_S(mParameters, 3) + 69.0) * 0.252525252525))) - var_chaste_interface__y_na_fast__y_na_fast) * 0.5; // 'per millisecond'
        const double d_dt_chaste_interface__x_na_late__x_na_late = ((1.0 / (1.0 + exp((NV_Ith_S(mParameters, 3) + 30.0) *  -0.2))) - var_chaste_interface__x_na_late__x_na_late) * 0.0666666666667; // 'per millisecond'
        const double d_dt_chaste_interface__y_na_late__y_na_late = ((0.1 + (0.9 / (1.0 + exp((NV_Ith_S(mParameters, 3) + 75.6) * 0.15873015873)))) - var_chaste_interface__y_na_late__y_na_late) / (120.0 + (1.0 * exp((NV_Ith_S(mParameters, 3) + 100.0) * 0.04))); // 'per millisecond'
        const double d_dt_chaste_interface__y_gate_f_na__y_gate_f_na = ((1.0 / (1.0 + exp((NV_Ith_S(mParameters, 3) + 109.0) * 0.1))) - var_chaste_interface__y_gate_f_na__y_gate_f_na) / (6000.0 / (exp( -1.0 * (2.9 + (0.04 * NV_Ith_S(mParameters, 3)))) + exp(1.0 * (3.6 + (0.11 * NV_Ith_S(mParameters, 3)))))); // 'per millisecond'
        
        NV_Ith_S(rDY, 0) = d_dt_chaste_interface__membrane__Ca_i_peripheral;
        NV_Ith_S(rDY, 1) = d_dt_chaste_interface__membrane__Ca_i_bulk;
        NV_Ith_S(rDY, 2) = d_dt_chaste_interface__membrane__Ca_sr;
        NV_Ith_S(rDY, 3) = d_dt_chaste_interface__membrane__Na_i;
        NV_Ith_S(rDY, 4) = d_dt_chaste_interface__x_Ttype__x_Ttype;
        NV_Ith_S(rDY, 5) = d_dt_chaste_interface__y_Ttype__y_Ttype;
        NV_Ith_S(rDY, 6) = d_dt_chaste_interface__x_Ltype__x_Ltype;
        NV_Ith_S(rDY, 7) = d_dt_chaste_interface__y_Ltype__y_Ltype;
        NV_Ith_S(rDY, 8) = d_dt_chaste_interface__y_ca_Ltype__y_ca_Ltype;
        NV_Ith_S(rDY, 9) = d_dt_chaste_interface__x_na_fast__x_na_fast;
        NV_Ith_S(rDY, 10) = d_dt_chaste_interface__y_na_fast__y_na_fast;
        NV_Ith_S(rDY, 11) = d_dt_chaste_interface__x_na_late__x_na_late;
        NV_Ith_S(rDY, 12) = d_dt_chaste_interface__y_na_late__y_na_late;
        NV_Ith_S(rDY, 13) = d_dt_chaste_interface__y_gate_f_na__y_gate_f_na;
    }
    
    N_Vector Dynamiccorrias_purkinje_2011FromCellMLCvode::ComputeDerivedQuantities(double var_chaste_interface__Time__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__Ca_i_peripheral = NV_Ith_S(rY, 0);
        // Units: millimolar; Initial value: 0.00001
        double var_chaste_interface__x_Ltype__x_Ltype = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.000003
        double var_chaste_interface__y_Ltype__y_Ltype = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.1
        double var_chaste_interface__y_ca_Ltype__y_ca_Ltype = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.7
        
        
        // Mathematics
        const double var_i_cal__i_cal = 5.4 * var_chaste_interface__x_Ltype__x_Ltype * var_chaste_interface__y_Ltype__y_Ltype * var_chaste_interface__y_ca_Ltype__y_ca_Ltype * (NV_Ith_S(mParameters, 3) - (log(NV_Ith_S(mParameters, 0) / var_chaste_interface__membrane__Ca_i_peripheral) * 13.3568803298)); // current_units
        const double var_membrane__i_stim = 0.0; // current_units
        const double var_chaste_interface__protocol__i_cal = (var_i_cal__i_cal / NV_Ith_S(mParameters, 2)) * NV_Ith_S(mParameters, 4); // proto_uA_per_cm2
        
        N_Vector dqs = N_VNew_Serial(3);
        NV_Ith_S(dqs, 0) = var_chaste_interface__protocol__i_cal;
        NV_Ith_S(dqs, 1) = var_membrane__i_stim;
        NV_Ith_S(dqs, 2) = var_chaste_interface__Time__time;
        return dqs;
    }
    
template<>
void OdeSystemInformation<Dynamiccorrias_purkinje_2011FromCellMLCvode>::Initialise(void)
{
    // Time units: millisecond
    // 
    this->mSystemName = "Corrias_rabbit_purkinje_model";
    
    this->mVariableNames.push_back("membrane__Ca_i_peripheral");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00001);

    this->mVariableNames.push_back("membrane__Ca_i_bulk");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000032);

    this->mVariableNames.push_back("membrane__Ca_sr");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.17);

    this->mVariableNames.push_back("membrane__Na_i");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(6.7);

    this->mVariableNames.push_back("x_Ttype__x_Ttype");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001337);

    this->mVariableNames.push_back("y_Ttype__y_Ttype");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.01);

    this->mVariableNames.push_back("x_Ltype__x_Ltype");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000003);

    this->mVariableNames.push_back("y_Ltype__y_Ltype");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.1);

    this->mVariableNames.push_back("y_ca_Ltype__y_ca_Ltype");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7);

    this->mVariableNames.push_back("x_na_fast__x_na_fast");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000007);

    this->mVariableNames.push_back("y_na_fast__y_na_fast");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.978861);

    this->mVariableNames.push_back("x_na_late__x_na_late");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000012);

    this->mVariableNames.push_back("y_na_late__y_na_late");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.864489);

    this->mVariableNames.push_back("y_gate_f_na__y_gate_f_na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.011099);

    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");
    
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");
    
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("capacitance_units");
    
    this->mParameterNames.push_back("membrane_voltage");
    this->mParameterUnits.push_back("millivolt");
    
    this->mParameterNames.push_back("protocol__chaste_membrane_capacitance");
    this->mParameterUnits.push_back("proto_uF_per_cm2");
    
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("proto_uA_per_cm2");
    
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("current_units");
    
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");
    
    this->mInitialised = true;
}


extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamiccorrias_purkinje_2011FromCellMLCvode(pSolver, pStimulus);
    }
    
}

#endif // CHASTE_CVODE
