= Functional Curation at COMBINE2011 =

== Background ==

In the SED-ML session at COMBINE2011, JC will be giving a talk on Functional Curation and related suggestions for SED-ML development.
This file contains my initial notes for the talk.

Initial email to SED-ML list: http://sourceforge.net/mailarchive/message.php?msg_id=27642867

== Rough talk outline ==

 1. Give FC context (from short intro in email, with a few example plots from paper)
   * Table comparing expt & sim cases, 3 cols 2 rows
   * SED-ML does 1-1, we want *-1, 1-*, *-*
   * Complex post-proc - eg APD w/ diags
 1. Enumerate main suggestions (1 or 4 slides?)
   1. Applying proto to any model (ontos & units, model interface section)
   1. Nested simulations & protocols, similarly to [http://frank-fbergmann.blogspot.com/2010/03/nested-simulation-experiments.html Frank's proposal]; also sequences of simulations
   1. Post-processing
    * Could describe key features of language here
   1. Libraries for usability - different levels of user, UIs
    * May not give any more details on this point
    * Except that also feeds in to the environments/naming point
 1. Delve into details
  * Start with slide giving the components of a protocol to provide context?
   * May need to introduce key concepts further here:
    * System of equations
    * Regular n-d array-based pure functional language
  * Applying proto to any model
   * Ontology terms to identify variables
   * Units conversions
    * Protocol needs to declare what units it's using
    * "Biology-aware" units conversion rules (w/ citation)
     * Mention provision of alternatives depending on available terms?
   * Model modifications based on "system of equations" viewpoint
    * Identify inputs & outputs - these could involve modifications (voltage clamp example)
    * Motivate other changes with stimulus example
    * Probably don't go into detail of issues?
  * Sequenced & nested simulations
   * Briefly state basic concept as in Frank's proposal
   * Brief mention of ranges & modifiers.
    * The save/reset state case is novel, making chaining simulations useful.
   * Nested protocols - explain needed to avoid breaking data model?
    * Note also that some ideas can be applied outside system of equations viewpoint?
  * Post-processing
   * How much detail needed?  How to get across concepts?
   * Key features: functions, basic expressions, environments?
   * Environment concepts
    * Driven by onto, libraries, multiple seqs, closures, etc.
   * Special expressions, mainly using csymbols
    * newArray
    * view
    * map, fold
    * find, index
    * accessor, tuple
    * Functions and default parameters
   * List of value types on single slide

Mention that a RELAX NG schema for the current prototype is available, as will be source code for the implementation.  Highlight what features are not yet implemented.

Note that names here don't always exactly match names used in the code at present.

== Notes on the protocol language features & structure ==

See https://chaste.cs.ox.ac.uk/cgi-bin/trac.cgi/wiki/SimulationProtocolNotes

Will need to explain early on (under 'applying to any model') that the protocol treats the model conceptually as a system of equations - it doesn't know or care about structural details of any particular modelling language (although implementations will need to).


= Temporary implementation notes =

 * UnitsConverter.modify_rhs has the case of using fullname to connect variables.  Change the default connector to use fullname (of source) if we hit an intermediate with the same name that isn't connected.