Title: Possibilities for SED-ML
Authors: Jonathan Cooper, Gary Mirams, James Osborne
Abstract:

We have been working on defining and using virtual experiments within
a variety of contexts, including cardiac electrophysiology,
multi-cellular tissue dynamics, immunology, and synthetic biology.  In
doing so we have found that extensions are required if SED-ML is to
address our needs.  This talk will introduce some of our use cases,
highlight our functional curation framework
(https://chaste.cs.ox.ac.uk/cgi-bin/trac.cgi/wiki/FunctionalCuration)
for running experiments on a range of models, and outline our
proposals for SED-ML.

 * Use cases
   * Cardiac model curation
     * Emphasise same proto on diff model etc.
     * st-st and/or dynamic restitution
   * Cell-based Chaste parameter sweeping
   * BME?  (Maybe just side mention, along with textual syntax)
 * Extension proposals (make clear which I've implemented)
   * Model declaration that isn't tied to a particular file
     * source attribute holds a special sedml URN, e.g. urn:sedml:anymodel
   * Enhance target attr on variable: #id and onto terms
     * Or use additional optional attrs
   * Chaining data generators using #id variable targets
   * New task hierarchy: task, nestedTask, combinedTask
   * Challenges of handling n-d data
     * Enhance taskReference on variable: task:subtask
     * Require views/slices for useful post-processing & display,
       and helpful to be able to create arrays too
     * Also need maps & folds
     * Find & index is the other helpful pair
   * Being able to represent a timecourse as nested/oneStep
     (Put as minor point under enhanced target attr?  Needs new hierarchy before it)
     * Requires specifying and setting task/simulation/algorithm parameters
     * Setting parameters could be done using the #id syntax
     * Declare using a <parameter id="..."> element?
     * Could add an optional id to algorithmParameter also
 * Future ideas for extensions
   (Note that we've done some in our system; others we're still thinking about)
   * Units conversions - hard to do without cross-lang units support
   * Equivalents of our libraries & imports?
     * Maybe just a simple merge for the latter, initially
   * Some mention of the challenge of outputs that vary in size each iteration
     (from the cell-based Chaste work)
 * Maybe mention related work, Slay, etc.
