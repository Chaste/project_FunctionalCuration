/*

Copyright (c) 2005-2015, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#ifndef MULTIPLESTEPPER_HPP_
#define MULTIPLESTEPPER_HPP_

#include "AbstractStepper.hpp"

#include <vector>

/**
 * This class supports the use case of having multiple ranges in a SED-ML repeatedTask,
 * by collecting multiple ranges into one object.
 *
 * The primary range for the task, given by the range attribute in SED-ML, should be first
 * in the collection.  This is used to determine when the loop has completed.  Other steppers
 * are incremented whenever the primary is, and their values are available through the task's
 * environment.
 */
class MultipleStepper : public AbstractStepper
{
public:
    /**
     * Create a new range collection.
     *
     * @param rSteppers  the constituent steppers, the first of which is treated as the primary
     */
    MultipleStepper(const std::vector<AbstractStepperPtr>& rSteppers);

    /**
     * Test whether the primary stepper has reached the end.
     */
    bool AtEnd();

    /**
     * Return the number of output points that will be generated by the primary stepper.
     */
    unsigned GetNumberOfOutputPoints() const;

    /**
     * Return whether the end point is fixed, and hence the number of output points known at
     * the start, or whether it is determined by a dynamic condition, and hence the number of
     * output points is unknown until AtEnd returns true.
     */
    bool IsEndFixed() const;

    /**
     * If any of our steppers was constructed with expressions rather than values, evaluate the
     * expressions in the stepper's environment (which must have been set with SetEnvironment)
     * to convert them to the parameters for that stepper.
     */
    void Initialise();

    /**
     * Reset all our steppers to their starting points.
     */
    void Reset();

    /**
     * Increment the primary stepper to its next output point, and return the corresponding
     * value of the stepper variable.  The value is undefined if AtEnd returns true
     * after this call.
     *
     * Throws if any stepper in the collection has already reached its end.
     */
    double Step();

    /**
     * Set the environment in which our steppers value are to be bound.
     *
     * @param pEnv
     */
    void SetEnvironment(EnvironmentPtr pEnv);

private:
    /** The ranges in this collection. */
    std::vector<AbstractStepperPtr> mSteppers;
};

#endif // MULTIPLESTEPPER_HPP_
