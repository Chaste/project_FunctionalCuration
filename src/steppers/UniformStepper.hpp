/*

Copyright (c) 2005-2012, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#ifndef UNIFORMSTEPPER_HPP_
#define UNIFORMSTEPPER_HPP_

#include <string>

#include "AbstractStepper.hpp"

/**
 * A simulation protocol stepper that generates a uniform spread of output points
 * over a defined range.
 */
class UniformStepper : public AbstractStepper
{
public:
    /**
     * Create a uniform stepper.
     *
     * Note that both start and end points will be included in the range, and that
     * stepInterval must divide endPoint - startPoint.
     *
     * @param rIndexName  the name of the index variable iterated over by this stepper
     * @param rIndexUnits  the units of the index variable
     * @param startPoint  the start of the range to iterate over
     * @param endPoint  the end of the range to iterate over
     * @param stepInterval  the size of the steps the range is divided into
     */
    UniformStepper(const std::string& rIndexName,
                   const std::string& rIndexUnits,
                   double startPoint,
                   double endPoint,
                   double stepInterval);

    /**
     * Create a uniform stepper.
     *
     * Note that both start and end points will be included in the range, and that
     * stepInterval must divide endPoint - startPoint.
     *
     * @param rIndexName  the name of the index variable iterated over by this stepper
     * @param rIndexUnits  the units of the index variable
     * @param pStartPoint  the start of the range to iterate over
     * @param pEndPoint  the end of the range to iterate over
     * @param pStepInterval  the size of the steps the range is divided into
     */
    UniformStepper(const std::string& rIndexName,
                   const std::string& rIndexUnits,
                   AbstractExpressionPtr pStartPoint,
                   AbstractExpressionPtr pEndPoint,
                   AbstractExpressionPtr pStepInterval);

    /**
     * Return the number of output points that will be generated by this stepper.
     * This allows us to create the correct size of output array before filling it
     * with data.
     */
    unsigned GetNumberOfOutputPoints() const;

    /**
     * The end point is fixed, and hence the number of output points is known at the start.
     */
    bool IsEndFixed() const;

    /**
     * If this stepper was constructed with expressions rather than values, evaluate the
     * expressions in the stepper's environment (which must have been set with SetEnvironment)
     * to convert them to the parameters for this stepper.
     */
    void Initialise();

    /**
     * Reset this stepper to its starting point.
     */
    void Reset();

    /**
     * Increment this stepper to its next output point, and return the corresponding
     * value of the index variable.
     */
    double Step();

    /** Get method for #mStartPoint */
    double GetStartPoint() const;

    /** Get method for #mEndPoint */
    double GetEndPoint() const;

    /** Get method for #mInterval */
    double GetInterval() const;

private:
    /** The start of the range to iterate over. */
    double mStartPoint;

    /** The end of the range to iterate over. */
    double mEndPoint;

    /** The size of the steps the range is divided into. */
    double mInterval;

    /** How many steps there are in total. */
    unsigned mNumSteps;

    /**
     * Check that the stepper's parameters are valid.
     */
    void CheckParameters();
};

#endif // UNIFORMSTEPPER_HPP_
