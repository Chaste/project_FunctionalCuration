/*

Copyright (C) University of Oxford, 2005-2012

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Chaste is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

Chaste is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
License for more details. The offer of Chaste under the terms of the
License is subject to the License being interpreted in accordance with
English Law and subject to any action against the University of Oxford
being under the jurisdiction of the English Courts.

You should have received a copy of the GNU Lesser General Public License
along with Chaste. If not, see <http://www.gnu.org/licenses/>.

*/

#ifndef VECTORSTEPPER_HPP_
#define VECTORSTEPPER_HPP_

#include <vector>
#include <string>

#include "AbstractStepper.hpp"

/**
 * A simulation protocol stepper that outputs an arbitrary predefined list of points.
 */
class VectorStepper : public AbstractStepper
{
public:
    /**
     * Create a vector stepper over the given list of values.
     *
     * @param rIndexName  the name of the index variable iterated over by this stepper
     * @param rIndexUnits  the units of the index variable
     * @param rValues  the values to step through
     */
    VectorStepper(const std::string& rIndexName,
                  const std::string& rIndexUnits,
                  const std::vector<double>& rValues);

    /**
     * Create a vector stepper over a list of values.  In this constructor the values
     * are given by expressions, which will be evaluated in the stepper's environment
     * to yield the actual values to step over.
     *
     * @param rIndexName  the name of the index variable iterated over by this stepper
     * @param rIndexUnits  the units of the index variable
     * @param rValues  expressions yielding the values to step through
     */
    VectorStepper(const std::string& rIndexName,
                  const std::string& rIndexUnits,
                  const std::vector<AbstractExpressionPtr>& rValues);

    /**
     * Return the number of output points that will be generated by this stepper.
     * This allows us to create the correct size of output array before filling it
     * with data.
     */
    unsigned GetNumberOfOutputPoints() const;

    /**
     * The end point is fixed, and hence the number of output points is known at the start.
     */
    bool IsEndFixed() const;

    /**
     * If this stepper was constructed with expressions rather than values, evaluate the
     * expressions in the stepper's environment (which must have been set with SetEnvironment)
     * to convert them to the parameters for this stepper.
     */
    void Initialise();

    /**
     * Reset this stepper to its starting point.
     */
    void Reset();

    /**
     * Increment this stepper to its next output point, and return the corresponding
     * value of the index variable.  The value is undefined if AtEnd returns true
     * after this call.
     */
    double Step();

private:
    /** The values to iterate over. */
    std::vector<double> mValues;
};
#endif // VECTORSTEPPER_HPP_
