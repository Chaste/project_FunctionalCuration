/*

Copyright (c) 2005-2014, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#ifndef WHILESTEPPER_HPP_
#define WHILESTEPPER_HPP_

#include "AbstractStepper.hpp"

/**
 * A stepper that implements a while loop, continuing to increment the loop counter
 * variable (which starts at 0) as long as the loop condition evaluates as true.
 * The condition is tested each time Step is called, just after incrementing the loop
 * counter.  It is thus impossible to define an empty while loop.
 */
class WhileStepper : public AbstractStepper
{
public:
    /**
     * Create a while stepper with the given loop condition.
     *
     * @param rIndexName  the name of the index variable iterated over by this stepper
     * @param rIndexUnits  the units of the index variable
     * @param pCondition  the loop condition expression
     */
    WhileStepper(const std::string& rIndexName,
                 const std::string& rIndexUnits,
                 const AbstractExpressionPtr pCondition);

    /**
     * Return the number of output points that will be generated by this stepper.
     * This is guaranteed to be at least as large as the current output point, but may
     * not be the final value until AtEnd evaluates as true.
     */
    unsigned GetNumberOfOutputPoints() const;

    /**
     * The end point is not fixed, and hence the number of output points is not known at the start.
     */
    bool IsEndFixed() const;

    /**
     * This merely checks that the stepper's environment has been set with SetEnvironment, since
     * this is the environment in which the loop condition will be evaluated.
     */
    void Initialise();

    /**
     * Reset this stepper to its starting point.
     */
    void Reset();

    /**
     * Test whether this stepper has reached the end.
     */
    bool AtEnd();

    /**
     * Increment this stepper to its next output point, and return the corresponding
     * value of the index variable.
     */
    double Step();

private:
    /** The current estimate of the number of output points. */
    unsigned mNumberOfOutputPoints;

    /** The loop condition. */
    AbstractExpressionPtr mpCondition;

    /** Whether after the last call to Step the loop condition was false. */
    bool mAtEnd;
};

#endif // WHILESTEPPER_HPP_
