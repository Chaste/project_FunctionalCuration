documentation {
This protocol implements a time dependent voltage clamp protocol which interpolates a sequence of voltages
provided in an input CSV file.

Some extra- and intra-cellular concentrations are clamped, and later versions will add calcium buffering.

Parameters:
 * TODO

It requires models to provide variables with the annotations:
 * oxmeta:membrane_voltage
 * oxmeta:time
 * TODO
}

# Load the metadata tags for use with CellML models
namespace oxmeta = "https://chaste.comlab.ox.ac.uk/cellml/ns/oxford-metadata#"
# A private namespace just used in this protocol, for setting an initial membrane voltage
namespace local = "urn:fc:local#"

# List inputs 
inputs {
    steady_state_time = 1000 # ms
    clamp_data = load("voltage_clamp.csv")
    initial_voltage = clamp_data[1][0]
    initial_time = clamp_data[0][0]
    final_time = clamp_data[0][-1]
    sampling_interval = 0.1 # ms
}

# Import some useful functions
import std = "BasicLibrary.txt"

library {
    # Check the voltage clamp data looks like we expect
    assert clamp_data.IS_ARRAY
    assert clamp_data.NUM_DIMS == 2
    assert clamp_data.SHAPE[0] == 2
}

# Define units
units {
    mV = milli volt
    ms = milli second
    uA_per_cm2 = micro ampere . centi metre^-2 "{/Symbol m}A/cm^2" # Desired units of currents
    uF_per_cm2 = micro farad . centi metre^-2
    microamps = micro ampere
    A_per_F = ampere . farad^-1
    mM = milli mole . litre^-1 "{/Symbol m}M"
}

# List inputs and outputs of model with units
model interface {
    # Model inputs
    input local:initial_voltage units mV = 0.0
    input local:initial_time units ms = 0.0

    input oxmeta:extracellular_sodium_concentration units mM
    input oxmeta:extracellular_potassium_concentration units mM
    input oxmeta:extracellular_calcium_concentration units mM

    input oxmeta:cytosolic_sodium_concentration units mM
    input oxmeta:cytosolic_potassium_concentration units mM

    # Quantities to read from the model (simulation outputs)
    output oxmeta:membrane_L_type_calcium_current units uA_per_cm2
    output oxmeta:membrane_voltage units mV
    output oxmeta:time units ms

    # Clamp extracellular concs to fixed values
    # This is a convenience shorthand for 'define var = val'
    clamp oxmeta:extracellular_sodium_concentration to 140 :: mM
    clamp oxmeta:extracellular_potassium_concentration to 5 :: mM
    clamp oxmeta:extracellular_calcium_concentration to 1.8 :: mM

    # Clamp some intracellular concentrations too
    clamp oxmeta:cytosolic_sodium_concentration to 10 :: mM
    clamp oxmeta:cytosolic_potassium_concentration to 140 :: mM

    # The voltage clamp protocol, read from file
    var clamp units mV
    define clamp = interpolate("voltage_clamp.csv", oxmeta:time, ms, mV)
    define oxmeta:membrane_voltage = if oxmeta:time < local:initial_time then local:initial_voltage else clamp

    # Units conversion rules
    var chaste_membrane_capacitance units uF_per_cm2 = 1 # Used by units conversion rules
    convert A_per_F to uA_per_cm2 by lambda rhs: rhs * chaste_membrane_capacitance
    convert uA_per_cm2 to A_per_F by lambda rhs: rhs / chaste_membrane_capacitance
    convert microamps to uA_per_cm2 by lambda rhs: (rhs / oxmeta:membrane_capacitance) * chaste_membrane_capacitance
    convert uA_per_cm2 to microamps by lambda rhs: (rhs * oxmeta:membrane_capacitance) / chaste_membrane_capacitance
}

# Perform simulations
tasks {
    # Run at the initial value of the voltage clamp for a bit to get to steady state
    simulation timecourse {
        range time units ms vector [initial_time-steady_state_time, initial_time]
        modifiers {
            at start set local:initial_time = initial_time
            at start set local:initial_voltage = initial_voltage
        }
    }

    # Now run through the voltage clamp sequence
    simulation sim = timecourse {
        range time units ms uniform initial_time : sampling_interval : final_time
    }
}

# Do any calculations/modifications of data before plotting
post-processing {
    # Check validity of outputs
    assert sim:time.IS_ARRAY
    assert sim:membrane_voltage.IS_ARRAY
    assert sim:membrane_L_type_calcium_current.IS_ARRAY
}

# List any outputs from model which need to be carried forward to plotting or saved
outputs {
    I_CaL   = sim:membrane_L_type_calcium_current "I_{CaL}"
    time    = sim:time                            "Time"
    voltage = sim:membrane_voltage                "Applied potential"
}

# Create plots
plots {
    plot "Voltage Clamp"   using lines { voltage against time }
    plot "I_{CaL} current" using lines { I_CaL   against time }
}
